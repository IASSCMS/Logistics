"""
Django settings for logistics_core project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import sys
import logging

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5@qk89oz+(pmq*d$+k-#lb(*z(rf35m0y2+4=msy@2hc1*-_v)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'fleet',
    'assignment',
    'monitoring',
    'shipments',
    'drf_yasg',
    'route_optimizer',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'logistics_core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'logistics_core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache', # For development
        'LOCATION': 'unique-snowflake',
    }
}
OPTIMIZATION_RESULT_CACHE_TIMEOUT = 3600 # 1 hour

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# TODO: move this to environment
ENABLE_FLEET_EXTENDED_MODELS = False

# kafka settings
KAFKA_BROKER_URL = "localhost:9092"

# Try to load environment variables from file
try:
    from route_optimizer.utils.env_loader import load_env_from_file
    # Try different possible locations for the env file
    env_paths = [
        os.path.join(os.path.dirname(os.path.dirname(__file__)), 'env_var.env'),  # App directory
        os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'env_var.env'),  # Root directory
    ]
    
    for path in env_paths:
        if load_env_from_file(path):
            break
except ImportError:
    # Module might not be available during initial imports
    pass

# Determine if we're in test mode
TESTING = 'test' in sys.argv or 'pytest' in sys.modules

# Google Maps API configuration
GOOGLE_MAPS_API_KEY = os.getenv('GOOGLE_MAPS_API_KEY')
if not GOOGLE_MAPS_API_KEY:
    if not TESTING:
        raise ValueError("Google Maps API key is required. Set the GOOGLE_MAPS_API_KEY environment variable.")
    else:
        # Use a dummy key for testing
        GOOGLE_MAPS_API_KEY = "test_dummy_key_for_unit_tests"
        logging.warning("Using dummy Google Maps API key for testing.")

GOOGLE_MAPS_API_URL = 'https://maps.googleapis.com/maps/api/distancematrix/json'
USE_API_BY_DEFAULT = os.getenv('USE_API_BY_DEFAULT', 'False').lower() == 'true'

# API request settings
MAX_RETRIES = 3
BACKOFF_FACTOR = 2  # Exponential backoff
RETRY_DELAY_SECONDS = 1
CACHE_EXPIRY_DAYS = 30

# Cache settings
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache', # For development
        'LOCATION': 'unique-snowflake',
    }
}
OPTIMIZATION_RESULT_CACHE_TIMEOUT = 3600 # 1 hour


